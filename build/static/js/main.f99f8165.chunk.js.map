{"version":3,"sources":["firebase.js","components/poster_not_found.png","components/Movie.jsx","components/MovieList.js","components/Homepage.jsx","components/logo.png","components/Login.js","utils/refreshToken.js","components/Logout.js","components/AboutMe.js","components/Review.jsx","components/ReviewList.jsx","components/UserPage.js","components/MoviePage.jsx","components/Alert.js","components/SearchPage.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Movie","props","image_name","title","useState","exist","setExistence","img_path","setimg_path","useEffect","check_exist","API_id","img_src","url","poster_not_found","googleObj","ref","child","googleId","orderByChild","equalTo","limitToFirst","once","snap","val","className","src","alt","to","onClick","setAPI_id","db_key","remove","console","log","push","img","MovieList","listName","movieList","map","movie","id","poster_path","API_KEY","process","DAILY_SEARCH_API","WEEKLY_SEARCH_API","Homepage","topDaily","setTopDaily","topWeekly","setTopWeekly","a","Axios","get","result","temp","i","data","results","getDailymovies","getWeeklymovies","Login","clientId","buttonText","onSuccess","res","profileObj","refreshTiming","tokenObj","expires_in","refreshToken","reloadAuthResponse","newAuthRes","localStorage","setItem","id_token","setTimeout","refreshTokenSetup","setLoggedIn","setGoogleObj","onFailure","alert","cookiePolicy","isSignedIn","Logout","onLogoutSuccess","AboutMe","Review","movieTitle","user","reviewContent","stars","ReviewList","reviewList","setReviewList","on","snapshot","myReviews","forEach","review","key","UserPage","movies","setMovies","myMovies","imageUrl","style","fontSize","name","IMG_API","MoviePage","setReview","allReview","setAllReview","setMovie","SEARCH_API","reviews","givenName","familyName","concat","getMoviebyID","overview","length","wrap","onChange","target","value","Alert","SearchPage","query","setQuery","setAlert","searchStatus","setSearchstatus","getData","top10","onSubmit","e","preventDefault","type","autoComplete","placeholder","App","loggedIn","logo","height","div","bool","obj","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f99f8165.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCCvSz6NSkMPzmMbt0d90d9SXeJdazGVww\",\r\n    authDomain: \"seenit-bfe8f.firebaseapp.com\",\r\n    databaseURL: \"https://seenit-bfe8f-default-rtdb.firebaseio.com\",\r\n    projectId: \"seenit-bfe8f\",\r\n    storageBucket: \"seenit-bfe8f.appspot.com\",\r\n    messagingSenderId: \"636830494102\",\r\n    appId: \"1:636830494102:web:b51599d4d380e001c701b7\",\r\n    measurementId: \"G-1FVVW1Q9WY\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// Get a reference to the database service\r\nvar database = firebase.database();\r\n\r\nexport {\r\n    database as default\r\n}","export default __webpack_public_path__ + \"static/media/poster_not_found.be05f963.png\";","import React, { useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n// Assuming movie poster size has the ratio of 4050 pixels wide by 6000 pixels high\r\nimport database from '../firebase';\r\nimport poster_not_found from './poster_not_found.png'\r\n\r\nconst IMG_API = 'https://image.tmdb.org/t/p/w1280';\r\n\r\n//Movie component needs to take in a google object\r\nfunction Movie(props) {\r\n    const image_name = \"Image of cover for \" + props.title;\r\n    const [exist, setExistence] = useState(false);\r\n    const [img_path, setimg_path] = useState();\r\n\r\n    //console.log(props.key)\r\n\r\n    useEffect(() => {\r\n        check_exist(props.API_id);\r\n        let img_src = IMG_API + props.url;\r\n        if (props.url == null) {\r\n            // console.log(\"Poster was not found\")\r\n            setimg_path(poster_not_found)\r\n        } else {\r\n            // console.log(props.title)\r\n            // console.log(img_src)\r\n            setimg_path(img_src)\r\n        }\r\n    }, []);\r\n\r\n    const saveToDb = () => {\r\n        if (props.googleObj != null && !exist){\r\n            database.ref(`/users/${props.googleObj.googleId}/movies`).push(\r\n                {\r\n                    API_id: props.API_id,\r\n                    title: props.title,\r\n                    img: props.url\r\n                }\r\n            )\r\n            setExistence(true);\r\n        }\r\n        else{\r\n            console.log(\"object null\");\r\n        }\r\n    }\r\n\r\n    function deleteFromDb(db_key){\r\n        database.ref(`/users/${props.googleObj.googleId}/movies/${db_key}`).remove()\r\n    }\r\n\r\n\r\n    const check_exist = (API_id) => {\r\n        if (props.googleObj != null){\r\n            database.ref().child(`users/${props.googleObj.googleId}/movies`).orderByChild('API_id').equalTo(API_id)\r\n            .limitToFirst(1).once('child_added', snap => {\r\n                if(API_id === snap.val().API_id){\r\n                    setExistence(true);\r\n                } \r\n                else{\r\n                    setExistence(false);\r\n                }  \r\n            })\r\n        }\r\n    }\r\n\r\n    /*\r\n    function check_exist(movie_title){\r\n        database.ref(`users/${props.googleObj.googleId}/movies`).orderByChild(\"title\").equalTo(movie_title).once('value', function(snapshot){\r\n            if (snapshot.exists()){\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        })\r\n    }*/\r\n\r\n    function setID() {\r\n        props.setAPI_id(props.API_id)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"movie\">\r\n                <img src={img_path} alt={image_name} className=\"moviePoster\"/>\r\n                <Link to='/Movie' onClick={setID}>\r\n                    <div className=\"overlay\">\r\n                        <div className=\"movieText\">{props.title}</div>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n            <div>\r\n                {\r\n                exist ? \r\n                    <button className=\"databaseButton\" onClick={() => deleteFromDb(props.db_key)}>Delete from Favorite Movies</button>\r\n                    :\r\n                    <button className=\"databaseButton\" onClick={() => saveToDb()}> Add to Favorite Movies</button>\r\n                }\r\n            </div>\r\n            <br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Movie\r\n","import Movie from './Movie.jsx'\r\n// import { useEffect } from 'react'\r\n\r\n\r\nconst MovieList = (props) => {\r\n    //console.log(props.movieList[0])\r\n\r\n    // console.log(\"MovieList\")\r\n    // console.log(props.movieList)\r\n\r\n\r\n    // useEffect (() => {\r\n    //     console.log(props.movieList.map((movie) => {\r\n    //         console.log(movie)\r\n    //     }))\r\n    // }, [])\r\n\r\n\r\n    return (\r\n        <div className = \"movieList-container\">\r\n            <div className = \"movieListTitle-container\">\r\n                <div className = \"movieListTitle\">{props.listName}</div>\r\n            </div> \r\n            <br/>\r\n            <div className = \"movie-container\">\r\n                {props.movieList.map((movie) => (\r\n                    <Movie db_key={movie.db_key} API_id={movie.id} url={movie.poster_path} title={movie.title} googleObj={props.googleObj} setAPI_id={props.setAPI_id}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieList","import React from 'react'\r\nimport MovieList from './MovieList'\r\nimport Axios from 'axios'\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nconst API_KEY = process.env.REACT_APP_THEMOVIESDB_API_KEY;\r\nconst DAILY_SEARCH_API = 'https://api.themoviedb.org/3/trending/movie/day?api_key=' + API_KEY; // version 3\r\nconst WEEKLY_SEARCH_API = 'https://api.themoviedb.org/3/trending/all/week?api_key=' + API_KEY;\r\n\r\nconst Homepage = (props) => {\r\n\r\n    const [topDaily, setTopDaily] = useState([]);\r\n    const [topWeekly, setTopWeekly] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        getDailymovies()\r\n        getWeeklymovies()\r\n    },[])\r\n\r\n    async function getDailymovies() {\r\n        let result = await Axios.get(DAILY_SEARCH_API);\r\n        let temp = []\r\n        // Get only the top 10 movie\r\n        for (var i = 0; i < 14; i++) {\r\n            if (result.data.results[i]) {\r\n                temp.push(result.data.results[i])\r\n            }\r\n        }\r\n        setTopDaily(temp)\r\n    }\r\n\r\n    async function getWeeklymovies() {\r\n        let result = await Axios.get(WEEKLY_SEARCH_API);\r\n        let temp = []\r\n        // Get only the top 10 movie\r\n        for (var i = 0; i < 14; i++) {\r\n            if (result.data.results[i]) {\r\n                temp.push(result.data.results[i])\r\n            }\r\n        }\r\n        setTopWeekly(temp)\r\n    }\r\n\r\n    const dailylistName = \"Daily Trending Movies\"\r\n    const weeklylistName = \"Weekly Trending Movies\"\r\n\r\n    return (\r\n    <div>\r\n        <MovieList movieList={topDaily} listName={dailylistName} googleObj = {props.googleObj} setAPI_id = {props.setAPI_id}/>\r\n        <br/>\r\n        <MovieList movieList={topWeekly} listName={weeklylistName} googleObj = {props.googleObj} setAPI_id = {props.setAPI_id}/>\r\n        <br/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Homepage","export default __webpack_public_path__ + \"static/media/logo.004d2315.png\";","import React from 'react'\r\nimport { GoogleLogin } from 'react-google-login';\r\n// refresh token\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\n\r\nconst clientId = process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID;\r\n\r\nfunction Login(props) {\r\n\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    // alert(\r\n    //   `Logged in successfully! Welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\r\n    // );\r\n    refreshTokenSetup(res);\r\n    props.setLoggedIn(true);\r\n    props.setGoogleObj(res.profileObj);\r\n    // props.setName(res.profileObj.name);\r\n    // props.setURL(res.profileObj.imageUrl);\r\n  };\r\n\r\n  const onFailure = (res) => {\r\n    console.log('Login failed: res:', res);\r\n    alert(\r\n      `Failed to login 😢. Please try again`\r\n    );\r\n  };\r\n\r\n  //TODO: check if user exist in the data base, if not, add user to the data base\r\n  //maybe we don't need this?\r\n  /*\r\n  const addUser = (res) => {\r\n    database.ref(`/users/${res.profileObj.googleId}/userInfo`).push(\r\n      {\r\n        email = res.profileObj.email,\r\n        familyName = res.profileObj.familyName,\r\n        givenName: res.profileObj.givenName,\r\n        googleId = res.profileObj.googleId,\r\n        imageUrl = res.profileObj.imageUrl,\r\n        name = res.profileObj.name,\r\n      }\r\n    )\r\n  }\r\n  */\r\n  \r\n  return (\r\n\r\n    <div>\r\n      <GoogleLogin\r\n        clientId={clientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={'single_host_origin'}\r\n        isSignedIn={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n\r\n// Possible methods from login: (from react-google-login, the use-google-login.js)\r\n\r\n// res.googleId = basicProfile.getId()\r\n// res.tokenObj = authResponse\r\n// res.tokenId = authResponse.id_token\r\n// res.accessToken = authResponse.access_token\r\n// res.profileObj = {\r\n//   googleId: basicProfile.getId(),\r\n//   imageUrl: basicProfile.getImageUrl(),\r\n//   email: basicProfile.getEmail(),\r\n//   name: basicProfile.getName(),\r\n//   givenName: basicProfile.getGivenName(),\r\n//   familyName: basicProfile.getFamilyName()\r\n// }","export const refreshTokenSetup = (res) => {\r\n    // Timing to renew access token\r\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\r\n\r\n    const refreshToken = async () => {\r\n        const newAuthRes = await res.reloadAuthResponse();\r\n        refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\r\n        console.log('newAuthRes:', newAuthRes);\r\n      // saveUserToken(newAuthRes.access_token);  <-- save new token\r\n        localStorage.setItem('authToken', newAuthRes.id_token);\r\n\r\n      // Setup the other timer after the first one\r\n        setTimeout(refreshToken, refreshTiming);\r\n    };\r\n\r\n    // Setup first refresh timer\r\n    setTimeout(refreshToken, refreshTiming);\r\n};","import React from 'react';\r\nimport { GoogleLogout } from 'react-google-login';\r\n\r\nconst clientId = process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID //insert client id here\r\n\r\nfunction Logout(props) {\r\n\r\n    const onSuccess = () => {\r\n        console.log('Logout made successfully');\r\n        props.setLoggedIn(false);\r\n        //alert('Successfully logged out ✌');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n        <GoogleLogout\r\n            clientId={clientId}\r\n            buttonText=\"Logout\"\r\n            onLogoutSuccess={onSuccess}\r\n        ></GoogleLogout>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Logout;","\r\n\r\nfunction AboutMe(){\r\n    return(\r\n        <div className=\"AboutMe\">\r\n            <h3>About Me</h3>\r\n            <p>User Bio Here</p>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default AboutMe","import React from 'react'\r\nimport database from '../firebase'\r\n\r\n\r\nconst Review = (props) => {\r\n\r\n    console.log(props.db_key)\r\n\r\n    function deleteFromDb(db_key){\r\n        database.ref(`/users/${props.googleObj.googleId}/movieReviews/${db_key}`).remove()\r\n        database.ref(`/movieReviews/${props.API_id}/${db_key}`).remove()\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"ReviewContainerShadow\">\r\n            <div className=\"ReviewContainer\">\r\n                <div className=\"Review\">\r\n                    <h2>{props.db_key ? props.movieTitle : props.user}</h2>\r\n                    <q className=\"ReviewContent\">{props.reviewContent}</q>\r\n                    <p className=\"stars\">Stars: {props.stars}</p>\r\n                    {props.db_key ? <button className=\"databaseButton\" onClick={() => deleteFromDb(props.db_key)}> Delete review </button> : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Review","import React from \"react\"\r\nimport Review from \"./Review.jsx\"\r\nimport {useEffect} from 'react'\r\nimport {useState} from 'react'\r\nimport database from '../firebase'\r\n\r\n/*\r\nlet reviews = [{\r\n    movieTitle: \"Interstellar\",\r\n    url: \"https://upload.wikimedia.org/wikipedia/en/b/bc/Interstellar_film_poster.jpg\",\r\n    reviewContent: \"I love this movie. It holds a very special place in my heart. The story was excellent and the visuals were amazing.\",\r\n    stars: \"5\"\r\n}, {\r\n    movieTitle: \"Your Name\",\r\n    url: \"https://upload.wikimedia.org/wikipedia/en/0/0b/Your_Name_poster.png\",\r\n    reviewContent: \"One of the best animated films I've seen. Ever.\",\r\n    stars: \"5\"\r\n}, {\r\n    movieTitle: \"La La Land\",\r\n    url: \"https://upload.wikimedia.org/wikipedia/en/a/ab/La_La_Land_%28film%29.png\",\r\n    reviewContent: \"Got me singing the songs all the time!\",\r\n    stars: \"5\"\r\n}]*/\r\n\r\n\r\nconst ReviewList = (props) => {\r\n    const [reviewList, setReviewList] = useState([])\r\n\r\n    //get all reviews for the user\r\n    useEffect(() => \r\n        database.ref(`users/${props.googleObj.googleId}/movieReviews`).on(\"value\", (snapshot) =>{\r\n            let myReviews = []\r\n            if (snapshot != null){\r\n                snapshot.forEach(data => {\r\n                    let review = {\r\n                        db_key: data.key,\r\n                        API_id: data.val().API_id,\r\n                        title: data.val().title,\r\n                        reviewContent: data.val().review,\r\n                        stars: 5\r\n                    }\r\n                    console.log(review.db_key)\r\n                    myReviews.push(review)\r\n                })\r\n            }\r\n            setReviewList(myReviews)\r\n        })\r\n    ,[])\r\n\r\n    console.log(reviewList)\r\n\r\n    return (\r\n        <div className=\"ReviewList\">\r\n            <div className = \"movieListTitle\">My Recent Reviews</div>\r\n            {reviewList.map ((review) => (\r\n            <Review googleObj={props.googleObj} db_key={review.db_key} API_id={review.API_id} movieTitle={review.title}\r\n            reviewContent={review.reviewContent}\r\n            stars={review.stars}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReviewList","import MovieList from './MovieList'\r\nimport AboutMe from './AboutMe.js'\r\nimport ReviewList from './ReviewList'\r\nimport { useState, useEffect } from 'react'\r\nimport database from '../firebase'\r\n\r\n\r\nconst UserPage = (props) => {\r\n\r\n    //create list of movie from user's data base\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => \r\n        database.ref(`users/${props.googleObj.googleId}/movies`).on(\"value\", (snapshot) =>{\r\n            let myMovies = []\r\n            if (snapshot != null){\r\n                snapshot.forEach(data => {\r\n                    let movie = {\r\n                        db_key: data.key,\r\n                        title: data.val().title,\r\n                        poster_path: data.val().img,\r\n                        id: data.val().API_id\r\n                    }\r\n                    myMovies.push(movie)\r\n                })\r\n            }\r\n            //console.log(myMovies[0].key)\r\n            setMovies(myMovies)\r\n        })\r\n    ,[])\r\n\r\n    //console.log(movies)\r\n    return(\r\n        <div className=\"UserPageFlex\">\r\n            <div className=\"user\">\r\n                {/* <UserPic /> Disabled this component for now since it is broken*/}\r\n                {/* <img src =\"https://i.ytimg.com/vi/4y_lc8m4vSc/hqdefault.jpg\" /> */}\r\n                <img className=\"GooglePic\" src = {props.googleObj.imageUrl} alt=\"Your Profile Icon\"/>\r\n                <h3 style={{fontSize: \"40px\"}}>{props.googleObj.name}</h3>\r\n                <AboutMe />\r\n            </div>\r\n            <div className=\"UserContent\">\r\n                <div className=\"MyMovies\">\r\n                    <MovieList listName = \"My Favorite Movies\" googleObj = {props.googleObj} movieList = {movies} setAPI_id = {props.setAPI_id}/>\r\n                </div>\r\n                <br/>\r\n                <div className=\"MyReviews\">\r\n                    <ReviewList googleObj={props.googleObj} />\r\n                </div>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default UserPage","import React from 'react'\r\nimport Axios from 'axios'\r\nimport { useState, useEffect } from 'react'\r\nimport database from '../firebase'\r\nimport Review from \"./Review.jsx\"\r\nimport poster_not_found from './poster_not_found.png'\r\n\r\n\r\nconst API_KEY = process.env.REACT_APP_THEMOVIESDB_API_KEY\r\nconst IMG_API = 'https://image.tmdb.org/t/p/w1280';\r\n\r\nconst MoviePage = (props) => {\r\n\r\n    const[review, setReview] = useState(\"\")\r\n    const[allReview, setAllReview] = useState([])\r\n    const [movie, setMovie] = useState([])\r\n    const [img_path, setimg_path] = useState();\r\n\r\n    const SEARCH_API = 'https://api.themoviedb.org/3/movie/' + props.API_id + \"?api_key=\" + API_KEY;\r\n\r\n    //get all reviews for this movie\r\n    useEffect(() => \r\n        database.ref(`movieReviews/${props.API_id}`).on(\"value\", (snapshot) =>{\r\n            let reviews = []\r\n            if (snapshot != null){\r\n                snapshot.forEach(data => {\r\n                    let review = {\r\n                        key: data.key,\r\n                        API_id: data.val().API_id,\r\n                        user: data.val().user.givenName + ' ' + data.val().user.familyName,\r\n                        reviewContent: data.val().review,\r\n                        stars: 5\r\n                    }\r\n                    reviews.push(review)\r\n                })\r\n            }\r\n            setAllReview(allReview.concat(reviews))\r\n        })\r\n    ,[]) \r\n\r\n    useEffect(() => {\r\n        async function getMoviebyID() {\r\n            //console.log(SEARCH_API)\r\n            let result = await Axios.get(SEARCH_API);\r\n            //console.log(result.data);\r\n            setMovie(result.data)\r\n            //console.log(result.data.poster_path)\r\n            if (result.data.poster_path == null) {\r\n                setimg_path(poster_not_found)\r\n                //console.log(\"Not found\")\r\n            } else {\r\n                setimg_path(IMG_API + result.data.poster_path)\r\n                // console.log(img_path)\r\n            }\r\n        }\r\n        getMoviebyID(props.API_id)\r\n        // console.log(allReview)\r\n        // console.log(allReview.length == 0)\r\n\r\n        // Check to see if the poster exists, otherwise use a default placeholder image\r\n    },[])\r\n\r\n    //get text from the text box\r\n    function getData(val){\r\n        setReview(val.target.value)\r\n    }\r\n\r\n    //save new review to the data base \r\n    function saveReview(){\r\n        if (props.googleObj != null){\r\n            database.ref(`/users/${props.googleObj.googleId}/movieReviews`).push(\r\n                {\r\n                    API_id: props.API_id,\r\n                    title: movie.title,\r\n                    review: review\r\n                }\r\n            )\r\n            database.ref(`/movieReviews/${props.API_id}`).push(\r\n                {\r\n                    API_id: props.API_id,\r\n                    user: props.googleObj,\r\n                    review: review\r\n                }\r\n            )\r\n            setReview(\"\")\r\n        }\r\n        else{\r\n            console.log(\"object null\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <div className=\"MoviePageFlex\">\r\n                <div className=\"MovieImage\">\r\n                    <img src={img_path} alt={\"Movie Poster of \" + movie.title} className=\"MoviePagePoster\" />\r\n                </div>\r\n                <div className=\"MovieContent\">\r\n                    <h1 className=\"MovieTitle\">{movie.title}</h1>\r\n                    <p className=\"overview\">\r\n                        {movie.overview}\r\n                    </p>\r\n                    <br/>\r\n                    <div>\r\n                        <div>\r\n                            {(allReview.length === 0) ? <h1>Write the First Review</h1> : <h1>Write a Review</h1>}\r\n                        </div>\r\n                        <div className=\"WriteReviewContainer\">\r\n                            <div className=\"WriteReview\">\r\n                                <textarea className=\"textarea\" name=\"text\" wrap=\"soft\" onChange={getData} value={review}/>\r\n                                <br/>\r\n                                <button className=\"AddReviewButton\" onClick={saveReview}> Save Review </button>\r\n                            </div>\r\n                        </div>\r\n                        <br/>\r\n                        <div>\r\n                            {(allReview.length === 0) ? <h1>No Reviews Found</h1> : <h1>All Reviews</h1>}\r\n                        </div>\r\n                        {allReview.map ((review) => (\r\n                            <Review API_id = {movie.id} user = {review.user}\r\n                            reviewContent = {review.reviewContent}\r\n                            stars = {review.stars}/>\r\n                        ))}\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviePage","import React from \"react\";\r\n\r\nconst Alert = ({ alert }) => {\r\n  return (\r\n    <div className=\"alert\">\r\n      <h3>{alert}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;","import React, { useState } from 'react'\r\n// import { useEffect } from 'react'\r\nimport Axios from 'axios'\r\nimport Alert from './Alert'\r\nimport MovieList from './MovieList'\r\n\r\nconst SearchPage = (props) => {\r\n    let [query, setQuery] = useState('');\r\n    // let [movies, setMovies] = useState([{\r\n    //     id: 0,\r\n    //     title: \"Interstellar\",\r\n    //     poster_path: \"/xJHokMbljvjADYdit5fK5VQsXEG.jpg\",\r\n    //     overview: \"Good movie\",\r\n    //     vote_average: 8.3\r\n    // }]);\r\n    let [movies, setMovies] = useState([]);\r\n    let [alert, setAlert] = useState('');\r\n    let [searchStatus, setSearchstatus] = useState(false)\r\n    const API_KEY = process.env.REACT_APP_THEMOVIESDB_API_KEY;\r\n    const SEARCH_API = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_KEY + '&query=' + query; // version 3\r\n    //console.log(SEARCH_API)\r\n\r\n    const getData = async () => {\r\n        if (query !== \"\") {\r\n            console.log(\"The query submitted is: \"+ query)\r\n            const result = await Axios.get(SEARCH_API); // fetches the data\r\n            console.log(result.data.results)\r\n            if (result.data.results === []) { // alert if results array is empty\r\n                setAlert(\"No movie with such name\");\r\n                console.log(\"No movie found\");\r\n                return null;\r\n            }\r\n            //console.log(result.data)\r\n            // console.log(result.data.results); //should match line 31\r\n            // console.log(result.data.results[0]);\r\n            //let search_result = result.data.results\r\n            //setMovies(search_result); // get the movies data using results array\r\n            let top10 = [];\r\n            for (var i = 0; i < 10; i++){\r\n                if (result.data.results[i])\r\n                    top10.push(result.data.results[i]);\r\n            }\r\n            setMovies(top10); // get the movies data using results array\r\n            setSearchstatus(true)\r\n            //console.log(movies)\r\n            setQuery(\"\");\r\n            setAlert(\"\");\r\n        } else {\r\n            setAlert(\"Please fill out the form\")\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // Set the query so that if updates with each search\r\n    const onChange = e => {\r\n        //console.log(e.target.value)\r\n        setQuery(e.target.value);\r\n        //console.log(query);\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        if (query) {\r\n            getData();\r\n            setQuery('')\r\n        }\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     console.log(movies)\r\n    // }, [movies])\r\n\r\n    return (\r\n        <div className=\"SearchPage\">\r\n            <h1>Search for Movies</h1>\r\n            <form onSubmit={onSubmit} className=\"search-form\">\r\n                {alert !== \"\" && <Alert alert={alert} />}\r\n                {/* search bar */}\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"query\"\r\n                    onChange={onChange}\r\n                    value={query}\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"Search Movies\"\r\n                    className=\"textInput\"\r\n                />\r\n                {/* submit button */}\r\n                &nbsp;&nbsp;&nbsp;\r\n                <input type=\"submit\" value=\"Search\" className=\"searchButton\"/>\r\n            </form>\r\n            {/* list of movies displayed */}\r\n            <div className=\"search-results-container\">\r\n                {searchStatus ? <MovieList googleObj={props.googleObj} listName=\"Search Results\" movieList={movies} setAPI_id = {props.setAPI_id}/> : <p>Please search for a movie above!</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchPage;\r\n\r\n// Poster path looks like: https://image.tmdb.org/t/p/w500 + poster_path. For example: https://image.tmdb.org/t/p/w500/uDO8zWDhfWwoFdKS4fzkUJt0Rf0.jpg","import Homepage from './components/Homepage.jsx';\r\nimport logo from './components/logo.png'\r\nimport Login from './components/Login.js';\r\nimport Logout from './components/Logout.js';\r\nimport UserPage from './components/UserPage.js';\r\nimport MoviePage from './components/MoviePage';\r\nimport SearchPage from './components/SearchPage.js';\r\nimport { useState } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport './App.css';\r\n\r\n// Note that App() must return only a single set\r\n// If we want to redirect pages,: https://reactrouter.com/web/guides/quick-start\r\n\r\nfunction App() {\r\n\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n  const [googleObj, setGoogleObj] = useState();\r\n  const [API_id, setAPI_id] = useState();\r\n\r\n  return (\r\n    <Router>\r\n      {/* <Logo status={loggedIn}/> */}\r\n      <div className=\"navbar\">\r\n        <div className=\"headingColimg\">\r\n          <Link to =\"/\" className=\"link\"><img className=\"Logo\" src={logo} height=\"100\" alt=\"SeenIt logo\"/></Link>\r\n        </div>\r\n        <div className=\"headingCol\">\r\n          <h1 className=\"title\">SeenIt</h1>\r\n          <p className=\"subheading\">The Social Movie Network in React</p>\r\n        </div>\r\n        <div className=\"headingCol\">\r\n            <p className=\"headingText\">\r\n              <Link to = \"/Search\" className=\"link\">Search for a movie</Link>\r\n            </p>\r\n        </div>\r\n        <div className=\"headingCol\">\r\n          {loggedIn ? \r\n          <p className=\"headingText\">\r\n            <Link to = \"/User\" className=\"link\">View Profile</Link>\r\n          </p>\r\n          : \r\n          <p className=\"headingText\">\r\n              Log in to view profile\r\n          </p>\r\n          }\r\n        </div>\r\n        <div className=\"headingCol\">\r\n          <div div className = \"login-buttons\">\r\n            <div>\r\n              {loggedIn ? \r\n              <Logout loggedIn={loggedIn} setLoggedIn = {(bool) => setLoggedIn(bool)} setGoogleObj={(obj) => setGoogleObj(obj)}/>\r\n              :\r\n              <Login loggedIn={loggedIn} setLoggedIn = {(bool) => setLoggedIn(bool)} setGoogleObj={(obj) => setGoogleObj(obj)}/>}\r\n            </div>\r\n            <div>\r\n              <p className=\"headingText\">&nbsp; {googleObj ? `Welcome back, ${googleObj.name}!` : `Not logged in. Please log in.`}&nbsp;</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Homepage googleObj = {googleObj} setAPI_id = {(API_id) => setAPI_id(API_id)}/>\r\n        </Route>\r\n        <Route exact path=\"/Movie\">\r\n          <MoviePage googleObj = {googleObj} API_id = {API_id}/>\r\n        </Route>\r\n        <Route exact path=\"/User\">\r\n          {googleObj ? <UserPage googleObj = {googleObj} setAPI_id = {(API_id) => setAPI_id(API_id)} /> : <p></p>}\r\n        </Route>\r\n        <Route exact path=\"/Search\">\r\n          <SearchPage googleObj = {googleObj} setAPI_id = {(API_id) => setAPI_id(API_id)} />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}