{"version":3,"sources":["firebase.js","components/Movie.jsx","components/MovieList.js","components/logo.png","components/Logo.js","components/Homepage.jsx","components/Login.js","utils/refreshToken.js","components/Loginpage.jsx","components/Logout.js","components/AboutMe.js","components/Review.jsx","components/ReviewList.jsx","components/UserPic.js","components/UserPage.js","components/MoviePage.jsx","components/SearchMovie.js","components/Alert.js","components/SearchPage.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Movie","props","image_name","title","useState","exist","setExistence","useEffect","check_exist","googleObj","ref","child","googleId","orderByChild","equalTo","limitToFirst","once","snap","val","className","src","url","alt","href","onClick","id","remove","key","console","log","push","img","MovieList","listName","movieList","map","movie","Logo","to","logo","height","status","Homepage","movies","Login","clientId","process","buttonText","onSuccess","res","profileObj","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","localStorage","setItem","id_token","setTimeout","refreshTokenSetup","setLoggedIn","setGoogleObj","setName","name","setURL","imageUrl","onFailure","alert","cookiePolicy","isSignedIn","Loginpage","Logout","onLogoutSuccess","AboutMe","Review","movieTitle","user","reviewContent","stars","ReviewList","reviewList","setReviewList","on","snapshot","myReviews","forEach","data","review","concat","UserPic","UserPage","setMovies","myMovies","class","style","fontSize","MoviePage","setReview","allReview","setAllReview","reviews","givenName","familyName","wrap","onChange","target","value","SearchMovie","poster_path","vote_average","overview","Alert","SearchPage","query","setQuery","setAlert","searchStatus","setSearchstatus","SEARCH_API","getData","Axios","get","result","results","onSubmit","e","preventDefault","type","autoComplete","placeholder","App","loggedIn","bool","obj","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3ea924d.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCCvSz6NSkMPzmMbt0d90d9SXeJdazGVww\",\n    authDomain: \"seenit-bfe8f.firebaseapp.com\",\n    databaseURL: \"https://seenit-bfe8f-default-rtdb.firebaseio.com\",\n    projectId: \"seenit-bfe8f\",\n    storageBucket: \"seenit-bfe8f.appspot.com\",\n    messagingSenderId: \"636830494102\",\n    appId: \"1:636830494102:web:b51599d4d380e001c701b7\",\n    measurementId: \"G-1FVVW1Q9WY\"\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\n// Get a reference to the database service\nvar database = firebase.database();\n\nexport {\n    database as default\n}","import React, { useState } from 'react'\n// Note that we don't need to import App.css since this component is a child of App.js\n// Assuming movie poster size has the ratio of 4050 pixels wide by 6000 pixels high\nimport database from '../firebase'\nimport {useEffect} from 'react'\n\n\n//Movie component needs to take in a google object\nfunction Movie(props) {\n    const image_name = \"Image of cover for \" + props.title\n    const [exist, setExistence] = useState(false)\n\n    useEffect(() => {\n        check_exist(props.title);\n    });\n\n    function redirectMovie(e) {\n        e.preventDefault();\n        console.log(\"The movie poster was clicked\");\n    }\n\n    const saveToDb = () => {\n        if (props.googleObj != null && !exist){\n            database.ref(`/users/${props.googleObj.googleId}/movies`).push(\n                {\n                    title: props.title,\n                    img: props.url\n                }\n            )\n            setExistence(true);\n        }\n        else{\n            console.log(\"object null\");\n        }\n    }\n\n    //props.id is null from homepage\n    //might want to change this? kinda messy and might cause problems if there are two movies of the same name\n    const deleteFromDb = (title) => {\n        if (!props.id){\n            database.ref().child(`users/${props.googleObj.googleId}/movies`).orderByChild('title').equalTo(title)\n            .limitToFirst(1).once('child_added', snap => {\n                if (title === snap.val().title ){\n                    database.ref(`/users/${props.googleObj.googleId}/movies/${snap.key}`).remove()\n                }\n            })\n        }\n        else{\n            database.ref(`/users/${props.googleObj.googleId}/movies/${props.id}`).remove()\n        }\n        setExistence(false);\n    }\n\n    const check_exist = (title) => {\n        if (props.googleObj != null){\n            database.ref().child(`users/${props.googleObj.googleId}/movies`).orderByChild('title').equalTo(title)\n            .limitToFirst(1).once('child_added', snap => {\n                if(title === snap.val().title){\n                    setExistence(true);\n                } \n                else{\n                    setExistence(false);\n                }  \n            })\n        }\n    }\n\n    /*\n    function check_exist(movie_title){\n        database.ref(`users/${props.googleObj.googleId}/movies`).orderByChild(\"title\").equalTo(movie_title).once('value', function(snapshot){\n            if (snapshot.exists()){\n                return true;\n            }\n            else{\n                return false;\n            }\n        })\n    }*/\n\n    return(\n        <div className=\"movie\">\n            <img src={props.url} alt={image_name} className=\"moviePoster\"/>\n            <a href={props.url}>\n                <div className=\"overlay\">\n                    <div className=\"movieText\">{props.title}</div>\n                </div>\n            </a>\n            <div>\n            {\n            exist ? \n                <button className=\"databaseButton\" onClick={() => deleteFromDb(props.title)}>Delete from Favorite Movies</button>\n                :\n                <button className=\"databaseButton\" onClick={() => saveToDb()}> Add to Favorite Movies</button>\n            }\n            </div>\n\n        </div>\n    )\n}\n\nexport default Movie\n","import PropTypes from 'prop-types'\nimport Movie from './Movie.jsx'\nimport {Link} from \"react\"\n\n\nconst MovieList = (props) => {\n    return (\n        <div className = \"movieList-container\">\n            <div className = \"movieListTitle-container\">\n                <div className = \"movieListTitle\">{props.listName}</div>\n            </div> \n            <div className = \"movie-container\">\n                {props.movieList.map((movie) => (\n                    <Movie key={movie.key} id={movie.id} url = {movie.url} title = {movie.title} googleObj = {props.googleObj}/>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default MovieList","export default __webpack_public_path__ + \"static/media/logo.004d2315.png\";","import logo from './logo.png'\nimport { Link } from 'react-router-dom'\n\n// Logo size is 174 px x 166 px\n\nfunction Logo(props){\n    return (\n            <div className=\"heading\">\n                <div className=\"headingColimg\">\n                    <Link to =\"/\" className=\"link\"><img className=\"Logo\" src={logo} height=\"140\"/></Link>\n                </div>\n                <div className=\"headingCol\">\n                    <h1 className=\"title\">SeenIt</h1>\n                    <p className=\"subheading\">The Social Movie Network in React</p>\n                </div>\n                <div className=\"headingCol\">\n                    <p className=\"headingText\">\n                        <Link to = \"/Movie\" className=\"link\">Go to Movie Page Test</Link>\n                    </p>\n                </div>\n                <div className=\"headingCol\">\n                    <p className=\"headingText\">\n                        <Link to = \"/Search\" className=\"link\">Search for a movie</Link>\n                    </p>\n                </div>\n                <div className=\"headingCol\">\n                    {props.status ? \n                    <p className=\"headingText\">\n                        <Link to = \"/User\" className=\"link\">View Profile</Link>\n                    </p>\n                    : \n                    <p className=\"headingText\">\n                        Log in to view profile\n                    </p>\n                    }\n                </div>\n            </div>\n    )\n}\n\nexport default Logo\n\n","import React from 'react'\nimport MovieList from './MovieList'\nimport Button from \"react-bootstrap/Button\";\nimport Logo from './Logo.js';\nimport { useState } from 'react'\n\nimport {Link} from \"react-router-dom\";\n\nconst Homepage = (props) => {\n\n    \n    const[movies, setMovies] = useState([\n        {\n            key: 1,\n            title: \"La La Land\",\n            url: \"https://upload.wikimedia.org/wikipedia/en/a/ab/La_La_Land_%28film%29.png\",\n        },\n        {\n            key: 2,\n            title: \"Your Name\",\n            url: \"https://upload.wikimedia.org/wikipedia/en/0/0b/Your_Name_poster.png\"\n        },\n        {\n            key: 3,\n            title: \"Interstellar\",\n            url: \"https://upload.wikimedia.org/wikipedia/en/b/bc/Interstellar_film_poster.jpg\"\n        }\n    ]) \n\n    const listName = \"Top User-Rated Movies\"\n\n\n    return (\n    <div>\n        {/* <Logo /> */}\n        {/* <p style={{textAlign: \"center\"}}>\n            <Link to = \"/User\">Go to User Page Test</Link>\n        </p> */}\n        {/* <Button className=\"Button\">\n            <Link to=\"/Login\">Log in here</Link>\n        </Button> */}\n        <MovieList movieList={movies} listName={listName} googleObj = {props.googleObj} />\n    </div>\n    )\n}\n\nexport default Homepage\n\n{/* <h1 className=\"title\">SeenIt</h1>\n<p className=\"subheading\">The Social Movie Network in React</p> */}","import React, { useState } from 'react'\n\nimport { GoogleLogin } from 'react-google-login';\n// refresh token\nimport { refreshTokenSetup } from '../utils/refreshToken';\n\nimport database from '../firebase';\n\nconst clientId = process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID;\n\nfunction Login(props) {\n\n  const onSuccess = (res) => {\n    console.log('Login Success: currentUser:', res.profileObj);\n    // alert(\n    //   `Logged in successfully! Welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\n    // );\n    refreshTokenSetup(res);\n    props.setLoggedIn(true);\n    props.setGoogleObj(res.profileObj);\n    props.setName(res.profileObj.name);\n    props.setURL(res.profileObj.imageUrl);\n  };\n\n  const onFailure = (res) => {\n    console.log('Login failed: res:', res);\n    alert(\n      `Failed to login 😢. Please try again`\n    );\n  };\n\n  //TODO: check if user exist in the data base, if not, add user to the data base\n  //maybe we don't need this?\n  /*\n  const addUser = (res) => {\n    database.ref(`/users/${res.profileObj.googleId}/userInfo`).push(\n      {\n        email = res.profileObj.email,\n        familyName = res.profileObj.familyName,\n        givenName: res.profileObj.givenName,\n        googleId = res.profileObj.googleId,\n        imageUrl = res.profileObj.imageUrl,\n        name = res.profileObj.name,\n      }\n    )\n  }\n  */\n  \n  return (\n\n    <div>\n      <GoogleLogin\n        clientId={clientId}\n        buttonText=\"Login\"\n        onSuccess={onSuccess}\n        onFailure={onFailure}\n        cookiePolicy={'single_host_origin'}\n        isSignedIn={true}\n      />\n    </div>\n  );\n}\n\nexport default Login;\n\n// Possible methods from login: (from react-google-login, the use-google-login.js)\n\n// res.googleId = basicProfile.getId()\n// res.tokenObj = authResponse\n// res.tokenId = authResponse.id_token\n// res.accessToken = authResponse.access_token\n// res.profileObj = {\n//   googleId: basicProfile.getId(),\n//   imageUrl: basicProfile.getImageUrl(),\n//   email: basicProfile.getEmail(),\n//   name: basicProfile.getName(),\n//   givenName: basicProfile.getGivenName(),\n//   familyName: basicProfile.getFamilyName()\n// }","export const refreshTokenSetup = (res) => {\n    // Timing to renew access token\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n\n    const refreshToken = async () => {\n        const newAuthRes = await res.reloadAuthResponse();\n        refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n        console.log('newAuthRes:', newAuthRes);\n      // saveUserToken(newAuthRes.access_token);  <-- save new token\n        localStorage.setItem('authToken', newAuthRes.id_token);\n\n      // Setup the other timer after the first one\n        setTimeout(refreshToken, refreshTiming);\n    };\n\n    // Setup first refresh timer\n    setTimeout(refreshToken, refreshTiming);\n};","import React from 'react'\nimport Login from './Login'\n\nconst Loginpage = () => {\n    return (\n        <div>\n            <Login />\n        </div>\n    )\n}\n\nexport default Loginpage","import React, { useState } from 'react';\nimport { GoogleLogout } from 'react-google-login';\n\nconst clientId = process.env.REACT_APP_GOOGLE_OAUTH_CLIENT_ID //insert client id here\n\nfunction Logout(props) {\n\n    const onSuccess = () => {\n        console.log('Logout made successfully');\n        props.setLoggedIn(false);\n        //alert('Successfully logged out ✌');\n    };\n\n    return (\n        <div>\n        <GoogleLogout\n            clientId={clientId}\n            buttonText=\"Logout\"\n            onLogoutSuccess={onSuccess}\n        ></GoogleLogout>\n    </div>\n    );\n}\n\nexport default Logout;","\n\nfunction AboutMe(){\n    return(\n        <div className=\"AboutMe\">\n            <h3>About Me</h3>\n            <p>User Bio Here</p>\n        </div>\n        \n    )\n}\n\nexport default AboutMe","import React from 'react'\n\n// let Review = {\n//     movieTitle: \"Interstellar\",\n//     reviewContent: \"\",\n//     stars: \"5\"\n// }\n\nconst Review = (props) => {\n    return (\n        <div id=\"ReviewContainerShadow\">\n            <div className=\"ReviewContainer\">\n                <div className=\"Review\">\n                    <h2>{props.movieTitle ? props.movieTitle : props.user}</h2>\n                    <q className=\"ReviewContent\">{props.reviewContent}</q>\n                    <p className=\"stars\">Stars: {props.stars}</p>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Review","import React from \"react\"\nimport Review from \"./Review.jsx\"\nimport {useEffect} from 'react'\nimport {useState} from 'react'\nimport database from '../firebase'\n\n/*\nlet reviews = [{\n    movieTitle: \"Interstellar\",\n    url: \"https://upload.wikimedia.org/wikipedia/en/b/bc/Interstellar_film_poster.jpg\",\n    reviewContent: \"I love this movie. It holds a very special place in my heart. The story was excellent and the visuals were amazing.\",\n    stars: \"5\"\n}, {\n    movieTitle: \"Your Name\",\n    url: \"https://upload.wikimedia.org/wikipedia/en/0/0b/Your_Name_poster.png\",\n    reviewContent: \"One of the best animated films I've seen. Ever.\",\n    stars: \"5\"\n}, {\n    movieTitle: \"La La Land\",\n    url: \"https://upload.wikimedia.org/wikipedia/en/a/ab/La_La_Land_%28film%29.png\",\n    reviewContent: \"Got me singing the songs all the time!\",\n    stars: \"5\"\n}]*/\n\n\nconst ReviewList = (props) => {\n    const [reviewList, setReviewList] = useState([])\n\n    //get all reviews for the user\n    useEffect(() => \n        database.ref(`users/${props.googleObj.googleId}/movieReviews`).on(\"value\", (snapshot) =>{\n            let myReviews = []\n            if (snapshot != null){\n                snapshot.forEach(data => {\n                    let review = {\n                        id: data.key,\n                        movieTitle: data.val().movie,\n                        reviewContent: data.val().review,\n                        stars: 5\n                    }\n                    myReviews.push(review)\n                })\n            }\n            setReviewList(reviewList.concat(myReviews))\n        })\n    ,[])\n\n    return (\n        <div className=\"ReviewList\">\n            <div className = \"movieListTitle\">My Recent Reviews</div>\n            {reviewList.map ((review) => (\n            <Review movieTitle = {review.movieTitle}\n            reviewContent = {review.reviewContent}\n            stars = {review.stars}/>\n            ))}\n        </div>\n    )\n}\n\nexport default ReviewList","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//import \"./styles.css\";   This gives an error, we don't have a style.css\n//put styling in App.css or create another file for cleaner code\n// No need for import if you do that. Assign a class name\nfunction UserPic() {\n    const uploadedImage = React.useRef(null);\n    const imageUploader = React.useRef(null);\n\n    const handleImageUpload = e => {\n        const [file] = e.target.files;\n        if (file) {\n            const reader = new FileReader();\n            const { current } = uploadedImage;\n            current.file = file;\n            reader.onload = e => {\n                current.src = e.target.result;\n            };\n            reader.readAsDataURL(file);\n        }\n    };\n\n    return (\n        <div style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }}>\n        <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleImageUpload}\n            ref={imageUploader}\n            style={{ display: \"none\"}}\n        />\n        <div style={{\n                height: \"60px\",\n                width: \"60px\",\n                border: \"2px dashed black\"\n            }}>\n            <img style={{\n                width: \"100%\",\n                height: \"100%\",\n                position: \"absolute\"\n            }}/>\n        </div>\n        Username\n    </div>\n    );\n}\n\nexport default UserPic","import MovieList from './MovieList'\nimport AboutMe from './AboutMe.js'\nimport ReviewList from './ReviewList'\nimport UserPic from './UserPic.js'\nimport { useState } from 'react'\nimport Movie from './Movie.jsx'\nimport {useEffect} from 'react'\nimport database from '../firebase'\n\n\nconst UserPage = (props) => {\n\n    //create list of movie from user's data base\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => \n        database.ref(`users/${props.googleObj.googleId}/movies`).on(\"value\", (snapshot) =>{\n            let myMovies = []\n            if (snapshot != null){\n                snapshot.forEach(data => {\n                    let movie = {\n                        id: data.key,\n                        title: data.val().title,\n                        url: data.val().img\n                    }\n                    myMovies.push(movie)\n                })\n            }\n            setMovies(movies.concat(myMovies))\n        })\n    ,[])\n\n    /*\n    const[movies, setMovies] = useState([\n        {\n            id: 1,\n            movie: \"Arrival\",\n            url: \"https://m.media-amazon.com/images/M/MV5BMTExMzU0ODcxNDheQTJeQWpwZ15BbWU4MDE1OTI4MzAy._V1_.jpg\",\n        },\n        {\n            id: 2,\n            movie: \"The Martian\",\n            url: \"https://images-na.ssl-images-amazon.com/images/I/A1%2BFw58qbDL._AC_SL1500_.jpg\"\n        },\n        {\n            id: 3,\n            movie: \"Interstellar\",\n            url: \"https://upload.wikimedia.org/wikipedia/en/b/bc/Interstellar_film_poster.jpg\"\n        }\n    ]) */\n\n\n    return(\n        <div class=\"UserPageFlex\">\n            <div className=\"user\">\n                {/* <UserPic /> Disabled this component for now since it is broken*/}\n                {/* <img src =\"https://i.ytimg.com/vi/4y_lc8m4vSc/hqdefault.jpg\" /> */}\n                <img className=\"GooglePic\" src = {props.googleObj.imageUrl} />\n                <h3 style={{fontSize: \"40px\"}}>{props.googleObj.name}</h3>\n                <AboutMe />\n            </div>\n            <div className=\"UserContent\">\n                <div className=\"MyMovies\">\n                    <MovieList listName = \"My Favorite Movies\" googleObj = {props.googleObj} movieList = {movies}/>\n                </div>\n                <br/>\n                <div className=\"MyReviews\">\n                    <ReviewList googleObj = {props.googleObj} />\n                </div>\n            </div>\n        </div> \n    )\n}\n\nexport default UserPage","import React from 'react'\nimport {useState} from 'react'\nimport database from '../firebase'\nimport {useEffect} from 'react'\nimport Review from \"./Review.jsx\"\n// Props should likely have properties:\n// URL (for image poster)\n// Name (For movie title)\n// Summary? Director? Writer? Actors? Not sure how this will work. Likely depends on how the data we obtain is formatted\n\nconst MoviePage = (props) => {\n\n    const[review, setReview] = useState(\"\")\n    const[allReview, setAllReview] = useState([])\n\n    //get all reviews for this movie\n    useEffect(() => \n        database.ref(`movieReviews/lalaland`).on(\"value\", (snapshot) =>{\n            let reviews = []\n            if (snapshot != null){\n                snapshot.forEach(data => {\n                    let review = {\n                        id: data.key,\n                        user: data.val().user.givenName + ' ' + data.val().user.familyName ,\n                        movieTitle: \"La la land\",\n                        reviewContent: data.val().review,\n                        stars: 5\n                    }\n                    reviews.push(review)\n                })\n            }\n            setAllReview(allReview.concat(reviews))\n        })\n    ,[]) \n\n    //get text from the text box\n    function getData(val){\n        setReview(val.target.value)\n    }\n\n    //save new review to the data base \n    function saveReview(){\n        if (props.googleObj != null){\n            database.ref(`/users/${props.googleObj.googleId}/movieReviews`).push(\n                {\n                    movie: \"La la Land\",\n                    review: review\n                }\n            )\n            database.ref(`/movieReviews/lalaland`).push(\n                {\n                    user: props.googleObj,\n                    review: review\n                }\n            )\n            setReview(\"\")\n        }\n        else{\n            console.log(\"object null\");\n        }\n    }\n\n    return (\n        <div className=\"MoviePageFlex\">\n            <div className=\"MovieImage\">\n                <img src=\"https://images-na.ssl-images-amazon.com/images/I/61pVLV%2Bz11L._AC_SL1162_.jpg\" alt=\"Movie Poster\" className=\"MoviePagePoster\" />\n            </div>\n            <div className=\"MovieContent\">\n                <h1>La La Land</h1>\n                <p>\n                    While navigating their careers in Los Angeles, a pianist and an actress fall in love while attempting to reconcile their aspirations for the future.\n                </p>\n                <h2>Director:&nbsp;\n                    <span>Joe Director</span>\n                </h2>\n                <h2>Writer:&nbsp;\n                    <span>Joe Writer</span>\n                </h2>\n                <h2>Starring:&nbsp;\n                    <span>Ryan Gosling</span>\n                </h2>\n                <div>\n                    <div>\n                        <h1>Write a review</h1>\n                    </div>\n                    <div className=\"WriteReviewContainer\">\n                        <div className=\"WriteReview\">\n                            <textarea className=\"textarea\" name=\"text\" wrap=\"soft\" onChange={getData} value={review}/>\n                            <button className=\"AddReviewButton\" onClick={saveReview}> Save Review </button>\n                        </div>\n                    </div>\n                    <br/>\n                    <div>\n                        <h1>All reviews</h1>\n                    </div>\n                    {allReview.map ((review) => (\n                        <Review user = {review.user}\n                        reviewContent = {review.reviewContent}\n                        stars = {review.stars}/>\n                    ))}\n                </div> \n            </div>\n        </div>\n    )\n}\n\nexport default MoviePage","import React from 'react';\n\nconst IMG_API = 'https://image.tmdb.org/t/p/w1280';\n\n// Component for the movie in the search results\nconst SearchMovie = ({title, poster_path, overview, vote_average}) => {\n\n    return (\n    <div className=\"movie\">\n        <img src = {IMG_API + poster_path} alt={title} />\n        <div className = \"movie-info\">\n            <h3> {title} </h3>\n            <span>{vote_average}</span>\n        </div>\n    </div>\n    )\n\n};\n\nexport default SearchMovie;\n","import React from \"react\";\n\nconst Alert = ({ alert }) => {\n  return (\n    <div className=\"alert\">\n      <h3>{alert}</h3>\n    </div>\n  );\n};\n\nexport default Alert;","import React, { useEffect, useState } from 'react'\nimport Axios from 'axios'\nimport { v4 as uuid4 } from 'uuid'\nimport SearchMovie from './SearchMovie'\nimport Alert from './Alert'\nimport MovieList from './MovieList'\n\nconst SearchPage = (props) => {\n    let [query, setQuery] = useState('');\n    // let [movies, setMovies] = useState([{\n    //     id: 0,\n    //     title: \"Interstellar\",\n    //     poster_path: \"/xJHokMbljvjADYdit5fK5VQsXEG.jpg\",\n    //     overview: \"Good movie\",\n    //     vote_average: 8.3\n    // }]);\n    let [movies, setMovies] = useState([]);\n    let [alert, setAlert] = useState('');\n    let [searchStatus, setSearchstatus] = useState(false)\n    let listName = \"Search Results\"\n    const API_KEY = \"78fcb8fa5df23ceee859f6258985efc4\";\n    const SEARCH_API = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_KEY + '&query=' + query; // version 3\n    console.log(SEARCH_API)\n\n    const getData = async () => {\n        if (query !== \"\") {\n            console.log(\"The query submitted is: \"+ query)\n            const result = await Axios.get(SEARCH_API); // fetches the data\n            if (result.data.results === []) { // alert if results array is empty\n                setAlert(\"No movie with such name\");\n                console.log(\"No movie found\");\n                return null;\n            }\n            //console.log(result.data)\n            console.log(result.data.results); //should match line 31\n            console.log(result.data.results[0]);\n            //let search_result = result.data.results\n            //setMovies(search_result); // get the movies data using results array\n            setMovies(result.data.results); // get the movies data using results array\n            setSearchstatus(true)\n            console.log(movies)\n            setQuery(\"\");\n            setAlert(\"\");\n        } else {\n            setAlert(\"Please fill out the form\")\n        }\n        return null;\n    };\n\n    // Set the query so that if updates with each search\n    const onChange = e => {\n        //console.log(e.target.value)\n        setQuery(e.target.value);\n        //console.log(query);\n    }\n\n    const onSubmit = e => {\n        e.preventDefault();\n        if (query) {\n            getData();\n            setQuery('')\n        }\n    };\n\n    return (\n        <div className=\"Search Page\">\n            <h1>Search for Movies</h1>\n            <form onSubmit={onSubmit} className=\"search-form\">\n                {alert !== \"\" && <Alert alert={alert} />}\n                {/* search bar */}\n                <input\n                    type=\"text\"\n                    name=\"query\"\n                    onChange={onChange}\n                    value={query}\n                    autoComplete=\"off\"\n                    placeholder=\"Search Movies\"\n                />\n                {/* submit button */}\n                <input type=\"submit\" value=\"Search\" />\n            </form>\n            {/* list of movies displayed */}\n            <div className=\"search-results-container\">\n                {/* {searchStatus ? <MovieList movieList={movies} listName={listName} googleObj = {props.googleObj}/> : <p>Please search for a movie above!</p>} */}\n                {searchStatus ? movies.map(movie => <SearchMovie title={movie.title} poster_path={movie.poster_path} overview={movie.overview} vote_average={movie.vote_average}/>) : <p>Please search for a movie above!</p>}\n            </div>\n        </div>\n    );\n}\n\nexport default SearchPage;\n\n// Poster path looks like: https://image.tmdb.org/t/p/w500 + poster_path. For example: https://image.tmdb.org/t/p/w500/uDO8zWDhfWwoFdKS4fzkUJt0Rf0.jpg","import Homepage from './components/Homepage.jsx';\nimport Logo from './components/Logo.js';\nimport Loginpage from './components/Loginpage.jsx';\nimport Login from './components/Login.js';\nimport Logout from './components/Logout.js';\nimport UserPage from './components/UserPage.js';\nimport MoviePage from './components/MoviePage';\nimport SearchPage from './components/SearchPage.js';\nimport { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { render } from '@testing-library/react';\n\n\nimport './App.css';\n\n// Note that App() must return only a single set\n// If we want to redirect pages,: https://reactrouter.com/web/guides/quick-start\n\nfunction App() {\n\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [googleObj, setGoogleObj] = useState()\n  const [name, setName] = useState();\n  const [picURL, setURL] = useState();\n\n  return (\n    <Router>\n      <div className = \"login-buttons\">\n        {/* {loggedIn ? <Logout loggedIn={loggedIn} setLoggedIn = {(bool) => setLoggedIn(bool)} setGoogleObj={(obj) => setGoogleObj(obj)}/> : \n        <Login loggedIn={loggedIn} setLoggedIn = {(bool) => setLoggedIn(bool)} setName={(name) => setName(name)} picURL={picURL} setURL={(url) => setURL(url)} \n          setGoogleObj={(obj) => setGoogleObj(obj)}/>}\n        {loggedIn ? <p>&nbsp;Hello {googleObj.name}&nbsp;</p>: <p>&nbsp;Not logged in. Please log in.&nbsp;</p> } */}\n\n\n        {loggedIn ? \n        <Logout loggedIn={loggedIn} setLoggedIn = {(bool) => setLoggedIn(bool)} setGoogleObj={(obj) => setGoogleObj(obj)}/>\n        :\n        <Login loggedIn={loggedIn} setLoggedIn = {(bool) => setLoggedIn(bool)} setGoogleObj={(obj) => setGoogleObj(obj)}/>}\n        <p>&nbsp; {googleObj ? `Welcome ${googleObj.name}!` : `Not logged in. Please log in.`}&nbsp;</p>\n        \n      </div>\n      {/* Most likely move the logo component outside so that it'll be easy to merge the google login button into a nav bar? */}\n      <Logo status={loggedIn}/>\n      <Switch>\n        <Route exact path=\"/\">\n          <Homepage googleObj = {googleObj} />\n        </Route>\n        <Route exact path=\"/Movie\">\n          {googleObj ? <MoviePage googleObj = {googleObj} /> : <p></p>}\n        </Route>\n        <Route exact path=\"/Login\" component={Loginpage} />\n        <Route exact path=\"/User\">\n          {googleObj ? <UserPage googleObj = {googleObj} /> : <p></p>}\n        </Route>\n        <Route exact path=\"/Search\" component={SearchPage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n\n{/* <h1 className=\"title\">SeenIt</h1>\n<p className=\"subheading\">The Social Movie Network—in React</p> */}\n\n// Note: we have an issue with MovieList and MyMovieList. Right now, we aren't passing googleProfileObj into MovieList (which is why the button doesn't work to add the movie to the database)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}